{"ast":null,"code":"(function () {\n  L.Control.FullScreen = L.Control.extend({\n    options: {\n      position: 'topleft',\n      title: 'Full Screen',\n      titleCancel: 'Exit Full Screen',\n      forceSeparateButton: false,\n      forcePseudoFullscreen: false,\n      fullscreenElement: false\n    },\n    onAdd: function onAdd(map) {\n      var className = 'leaflet-control-zoom-fullscreen',\n          container,\n          content = '';\n\n      if (map.zoomControl && !this.options.forceSeparateButton) {\n        container = map.zoomControl._container;\n      } else {\n        container = L.DomUtil.create('div', 'leaflet-bar');\n      }\n\n      if (this.options.content) {\n        content = this.options.content;\n      } else {\n        className += ' fullscreen-icon';\n      }\n\n      this._createButton(this.options.title, className, content, container, this.toggleFullScreen, this);\n\n      this._map.on('enterFullscreen exitFullscreen', this._toggleTitle, this);\n\n      return container;\n    },\n    _createButton: function _createButton(title, className, content, container, fn, context) {\n      this.link = L.DomUtil.create('a', className, container);\n      this.link.href = '#';\n      this.link.title = title;\n      this.link.innerHTML = content;\n      L.DomEvent.addListener(this.link, 'click', L.DomEvent.stopPropagation).addListener(this.link, 'click', L.DomEvent.preventDefault).addListener(this.link, 'click', fn, context);\n      L.DomEvent.addListener(container, fullScreenApi.fullScreenEventName, L.DomEvent.stopPropagation).addListener(container, fullScreenApi.fullScreenEventName, L.DomEvent.preventDefault).addListener(container, fullScreenApi.fullScreenEventName, this._handleFullscreenChange, context);\n      L.DomEvent.addListener(document, fullScreenApi.fullScreenEventName, L.DomEvent.stopPropagation).addListener(document, fullScreenApi.fullScreenEventName, L.DomEvent.preventDefault).addListener(document, fullScreenApi.fullScreenEventName, this._handleFullscreenChange, context);\n      return this.link;\n    },\n    toggleFullScreen: function toggleFullScreen() {\n      var map = this._map;\n      map._exitFired = false;\n\n      if (map._isFullscreen) {\n        if (fullScreenApi.supportsFullScreen && !this.options.forcePseudoFullscreen) {\n          fullScreenApi.cancelFullScreen();\n        } else {\n          L.DomUtil.removeClass(this.options.fullscreenElement ? this.options.fullscreenElement : map._container, 'leaflet-pseudo-fullscreen');\n        }\n\n        map.fire('exitFullscreen');\n        map._exitFired = true;\n        map._isFullscreen = false;\n      } else {\n        if (fullScreenApi.supportsFullScreen && !this.options.forcePseudoFullscreen) {\n          fullScreenApi.requestFullScreen(this.options.fullscreenElement ? this.options.fullscreenElement : map._container);\n        } else {\n          L.DomUtil.addClass(this.options.fullscreenElement ? this.options.fullscreenElement : map._container, 'leaflet-pseudo-fullscreen');\n        }\n\n        map.fire('enterFullscreen');\n        map._isFullscreen = true;\n      }\n    },\n    _toggleTitle: function _toggleTitle() {\n      this.link.title = this._map._isFullscreen ? this.options.title : this.options.titleCancel;\n    },\n    _handleFullscreenChange: function _handleFullscreenChange() {\n      var map = this._map;\n      map.invalidateSize();\n\n      if (!fullScreenApi.isFullScreen() && !map._exitFired) {\n        map.fire('exitFullscreen');\n        map._exitFired = true;\n        map._isFullscreen = false;\n      }\n    }\n  });\n  L.Map.addInitHook(function () {\n    if (this.options.fullscreenControl) {\n      this.fullscreenControl = L.control.fullscreen(this.options.fullscreenControlOptions);\n      this.addControl(this.fullscreenControl);\n    }\n  });\n\n  L.control.fullscreen = function (options) {\n    return new L.Control.FullScreen(options);\n  };\n  /* \n  Native FullScreen JavaScript API\n  -------------\n  Assumes Mozilla naming conventions instead of W3C for now\n  \n  source : http://johndyer.name/native-fullscreen-javascript-api-plus-jquery-plugin/\n  \n  */\n\n\n  var fullScreenApi = {\n    supportsFullScreen: false,\n    isFullScreen: function isFullScreen() {\n      return false;\n    },\n    requestFullScreen: function requestFullScreen() {},\n    cancelFullScreen: function cancelFullScreen() {},\n    fullScreenEventName: '',\n    prefix: ''\n  },\n      browserPrefixes = 'webkit moz o ms khtml'.split(' '); // check for native support\n\n  if (typeof document.exitFullscreen !== 'undefined') {\n    fullScreenApi.supportsFullScreen = true;\n  } else {\n    // check for fullscreen support by vendor prefix\n    for (var i = 0, il = browserPrefixes.length; i < il; i++) {\n      fullScreenApi.prefix = browserPrefixes[i];\n\n      if (typeof document[fullScreenApi.prefix + 'CancelFullScreen'] !== 'undefined') {\n        fullScreenApi.supportsFullScreen = true;\n        break;\n      }\n    }\n\n    if (typeof document['msExitFullscreen'] !== 'undefined') {\n      fullScreenApi.prefix = 'ms';\n      fullScreenApi.supportsFullScreen = true;\n    }\n  } // update methods to do something useful\n\n\n  if (fullScreenApi.supportsFullScreen) {\n    if (fullScreenApi.prefix === 'ms') {\n      fullScreenApi.fullScreenEventName = 'MSFullscreenChange';\n    } else {\n      fullScreenApi.fullScreenEventName = fullScreenApi.prefix + 'fullscreenchange';\n    }\n\n    fullScreenApi.isFullScreen = function () {\n      switch (this.prefix) {\n        case '':\n          return document.fullscreen;\n\n        case 'webkit':\n          return document.webkitIsFullScreen;\n\n        case 'ms':\n          return document.msFullscreenElement;\n\n        default:\n          return document[this.prefix + 'FullScreen'];\n      }\n    };\n\n    fullScreenApi.requestFullScreen = function (el) {\n      switch (this.prefix) {\n        case '':\n          return el.requestFullscreen();\n\n        case 'ms':\n          return el.msRequestFullscreen();\n\n        default:\n          return el[this.prefix + 'RequestFullScreen']();\n      }\n    };\n\n    fullScreenApi.cancelFullScreen = function () {\n      switch (this.prefix) {\n        case '':\n          return document.exitFullscreen();\n\n        case 'ms':\n          return document.msExitFullscreen();\n\n        default:\n          return document[this.prefix + 'CancelFullScreen']();\n      }\n    };\n  } // jQuery plugin\n\n\n  if (typeof jQuery !== 'undefined') {\n    jQuery.fn.requestFullScreen = function () {\n      return this.each(function () {\n        var el = jQuery(this);\n\n        if (fullScreenApi.supportsFullScreen) {\n          fullScreenApi.requestFullScreen(el);\n        }\n      });\n    };\n  } // export api\n\n\n  window.fullScreenApi = fullScreenApi;\n})();","map":null,"metadata":{},"sourceType":"script"}