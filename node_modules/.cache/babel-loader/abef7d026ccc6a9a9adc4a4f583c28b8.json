{"ast":null,"code":"import _slicedToArray from \"/Users/muradnerimanli/Desktop/react-leaflet-draw-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/muradnerimanli/Desktop/react-leaflet-draw-example/src/components/Task2.jsx\";\n\nimport React from \"react\";\nimport { render } from \"react-dom\";\nimport { Map, TileLayer, GeoJSON } from \"react-leaflet\";\nimport Marker from \"./../images/glass-marker.png\";\nimport markerShadow from \"./../images/marker-shadow.png\";\nimport L from 'leaflet';\n\nvar Task2 = function Task2() {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      fields = _React$useState2[0],\n      setFields = _React$useState2[1];\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 1),\n      _React$useState4$ = _React$useState4[0],\n      color = _React$useState4$ === void 0 ? \"black\" : _React$useState4$;\n\n  var colors = [\"green\", \"blue\", \"yellow\", \"orange\", \"grey\"];\n  React.useEffect(function () {\n    fetch(\"https://gist.githubusercontent.com/MaxAndolini/07846b5071dfac25c61db8fa5f45267a/raw/d0496d7ea29a12be586fe2355e78cbfb73787404/arazi.json\").then(function (response) {\n      return response.json();\n    }).then(function (data) {\n      var fields = data;\n      setFields(fields);\n    }).catch(function (error) {\n      return console.log(error);\n    });\n  }, []);\n\n  var changeFieldColor = function changeFieldColor(event) {\n    // Tıklayınca olacak işlemler\n    event.target.setStyle({\n      fillColor: color,\n      // Rengi\n      color: \"green\",\n      // Border rengi\n      fillOpacity: 1 // Opaklığı\n\n    });\n  };\n\n  var glassIcon = new L.Icon({\n    iconUrl: Marker,\n    iconSize: [26, 26],\n    popupAnchor: [0, -15],\n    shadowUrl: markerShadow,\n    shadowAnchor: [13, 28]\n  });\n\n  var onPointToLayer = function onPointToLayer(feature, latlng) {\n    return L.marker(latlng, {\n      icon: glassIcon\n    });\n  };\n\n  var onEachFeature = function onEachFeature(feature, layer) {\n    var fieldName = feature.properties.Name;\n    console.log(fieldName);\n    layer.bindPopup(fieldName); // Popup\n    //layer.options.fillOpacity = Math.random(); // 0-1 (0.1, 0.2, 0.3)\n\n    var colorIndex = Math.floor(Math.random() * colors.length);\n    layer.options.fillColor = colors[colorIndex]; //0\n\n    layer.on({\n      click: changeFieldColor\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Map, {\n    style: {\n      height: \"100vh\",\n      width: \"100%\"\n    },\n    zoom: 14 // Harita başladığında olan zoom\n    ,\n    minZoom: 14 // En fazla yapılabilecek zoom\n    ,\n    center: [38.244, 27.1897] // Haritanın merkezi\n    ,\n    maxBounds: [[38.244, 27.1897]] // Dışarı çıkılmaması gereken alan\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TileLayer, {\n    url: \"http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\",\n    attribution: \"\\xA9 <a href=\\\"https://www.neocrea.com.tr/\\\">NeoCrea</a> Software Solutions\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }\n  }), fields && /*#__PURE__*/React.createElement(GeoJSON, {\n    data: fields,\n    style: function style() {\n      return {\n        fillColor: \"red\",\n        // Rengi\n        fillOpacity: 1,\n        // Opaklığı\n        color: \"black\",\n        // Border rengi\n        weight: 3 // Border kalınlığı\n\n      };\n    },\n    onEachFeature: onEachFeature,\n    pointToLayer: onPointToLayer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  })));\n};\n\nexport default Task2;","map":{"version":3,"sources":["/Users/muradnerimanli/Desktop/react-leaflet-draw-example/src/components/Task2.jsx"],"names":["React","render","Map","TileLayer","GeoJSON","Marker","markerShadow","L","Task2","useState","fields","setFields","color","colors","useEffect","fetch","then","response","json","data","catch","error","console","log","changeFieldColor","event","target","setStyle","fillColor","fillOpacity","glassIcon","Icon","iconUrl","iconSize","popupAnchor","shadowUrl","shadowAnchor","onPointToLayer","feature","latlng","marker","icon","onEachFeature","layer","fieldName","properties","Name","bindPopup","colorIndex","Math","floor","random","length","options","on","click","height","width","weight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { render } from \"react-dom\";\nimport { Map, TileLayer, GeoJSON } from \"react-leaflet\";\nimport Marker from \"./../images/glass-marker.png\";\nimport markerShadow from \"./../images/marker-shadow.png\";\nimport L from 'leaflet';\n\nconst Task2 = () => {\n    const [fields, setFields] = React.useState(null);\n    const [color = \"black\"] = React.useState();\n    const colors = [\"green\", \"blue\", \"yellow\", \"orange\", \"grey\"];\n\n    React.useEffect(() => {\n        fetch(\n            \"https://gist.githubusercontent.com/MaxAndolini/07846b5071dfac25c61db8fa5f45267a/raw/d0496d7ea29a12be586fe2355e78cbfb73787404/arazi.json\"\n        )\n            .then((response) => response.json())\n            .then((data) => {\n                const fields = data;\n                setFields(fields);\n            })\n            .catch((error) => console.log(error));\n    }, []);\n\n    const changeFieldColor = (event) => {\n        // Tıklayınca olacak işlemler\n        event.target.setStyle({\n            fillColor: color, // Rengi\n            color: \"green\", // Border rengi\n            fillOpacity: 1 // Opaklığı\n        });\n    };\n\n    const glassIcon = new L.Icon({\n        iconUrl: Marker,\n        iconSize: [26, 26],\n        popupAnchor: [0, -15],\n        shadowUrl: markerShadow,\n        shadowAnchor: [13, 28]\n    });\n\n    const onPointToLayer = (feature, latlng) => {\n        return L.marker(latlng, {\n            icon: glassIcon\n        });\n    };\n\n    const onEachFeature = (feature, layer) => {\n        const fieldName = feature.properties.Name;\n        console.log(fieldName);\n        layer.bindPopup(fieldName); // Popup\n\n        //layer.options.fillOpacity = Math.random(); // 0-1 (0.1, 0.2, 0.3)\n        const colorIndex = Math.floor(Math.random() * colors.length);\n        layer.options.fillColor = colors[colorIndex]; //0\n\n        layer.on({\n            click: changeFieldColor\n        });\n    };\n\n    return (\n        <div>\n            <Map\n                style={{ height: \"100vh\", width: \"100%\" }}\n                zoom={14} // Harita başladığında olan zoom\n                minZoom={14} // En fazla yapılabilecek zoom\n                center={[38.244, 27.1897]} // Haritanın merkezi\n                maxBounds={[[38.244, 27.1897]]} // Dışarı çıkılmaması gereken alan\n            >\n                <TileLayer\n                    url=\"http://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}\"\n                    attribution='&copy; <a href=\"https://www.neocrea.com.tr/\">NeoCrea</a> Software Solutions'\n                />\n                {fields && (\n                    <GeoJSON\n                        data={fields}\n                        style={() => ({\n                            fillColor: \"red\", // Rengi\n                            fillOpacity: 1, // Opaklığı\n                            color: \"black\", // Border rengi\n                            weight: 3 // Border kalınlığı\n                        })}\n                        onEachFeature={onEachFeature}\n                        pointToLayer={onPointToLayer}\n                    />\n                )}\n                {/*<SetViewOnClick />*/}\n            </Map>\n        </div>\n    );\n}\n\nexport default Task2"]},"metadata":{},"sourceType":"module"}