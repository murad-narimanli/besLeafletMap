{"ast":null,"code":"import _defineProperty from \"/Users/muradnerimanli/Desktop/react-leaflet-draw-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/muradnerimanli/Desktop/react-leaflet-draw-example/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { createContext, createElement, useCallback, useState, useEffect, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED } from 'react'; // utility functions\n\nvar isFunction = function isFunction(fn) {\n  return typeof fn === 'function';\n};\n\nvar updateValue = function updateValue(oldValue, newValue) {\n  if (isFunction(newValue)) {\n    return newValue(oldValue);\n  }\n\n  return newValue;\n}; // ref: https://github.com/dai-shi/react-hooks-global-state/issues/5\n\n\nvar useUnstableContextWithoutWarning = function useUnstableContextWithoutWarning(Context, observedBits) {\n  var ReactCurrentDispatcher = __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;\n  var dispatcher = ReactCurrentDispatcher.current;\n\n  if (!dispatcher) {\n    throw new Error('Hooks can only be called inside the body of a function component. (https://fb.me/react-invalid-hook-call)');\n  }\n\n  return dispatcher.useContext(Context, observedBits);\n}; // core functions\n\n\nvar createGlobalStateCommon = function createGlobalStateCommon(initialState) {\n  var keys = Object.keys(initialState);\n  var globalState = initialState;\n  var listeners = [];\n\n  var calculateChangedBits = function calculateChangedBits(a, b) {\n    var bits = 0;\n    keys.forEach(function (k, i) {\n      if (a[k] !== b[k]) bits |= 1 << i;\n    });\n    return bits;\n  };\n\n  var Context = createContext(initialState, calculateChangedBits);\n\n  var GlobalStateProvider = function GlobalStateProvider(_ref) {\n    var children = _ref.children;\n\n    var _useState = useState(initialState),\n        _useState2 = _slicedToArray(_useState, 2),\n        state = _useState2[0],\n        setState = _useState2[1];\n\n    useEffect(function () {\n      listeners.push(setState);\n\n      if (globalState !== initialState) {\n        // globalState is updated during the initialization\n        // Note: there could be a better way for this\n        setState(globalState);\n      }\n\n      var cleanup = function cleanup() {\n        var index = listeners.indexOf(setState);\n        listeners.splice(index, 1);\n      };\n\n      return cleanup;\n    }, []);\n    return createElement(Context.Provider, {\n      value: state\n    }, children);\n  };\n\n  var setGlobalState = function setGlobalState(name, update) {\n    globalState = _objectSpread(_objectSpread({}, globalState), {}, _defineProperty({}, name, updateValue(globalState[name], update)));\n    listeners.forEach(function (f) {\n      return f(globalState);\n    });\n  };\n\n  var useGlobalState = function useGlobalState(name) {\n    var index = keys.indexOf(name);\n    var observedBits = 1 << index;\n    var state = useUnstableContextWithoutWarning(Context, observedBits);\n    var updater = useCallback(function (u) {\n      return setGlobalState(name, u);\n    }, [name]);\n    return [state[name], updater];\n  };\n\n  var getState = function getState() {\n    return globalState;\n  };\n\n  var setState = function setState(state) {\n    globalState = state;\n    listeners.forEach(function (f) {\n      return f(globalState);\n    });\n  };\n\n  return {\n    GlobalStateProvider: GlobalStateProvider,\n    setGlobalState: setGlobalState,\n    useGlobalState: useGlobalState,\n    getState: getState,\n    setState: setState\n  };\n}; // export functions\n\n\nexport var createGlobalState = function createGlobalState(initialState) {\n  var _createGlobalStateCom = createGlobalStateCommon(initialState),\n      GlobalStateProvider = _createGlobalStateCom.GlobalStateProvider,\n      useGlobalState = _createGlobalStateCom.useGlobalState,\n      setGlobalState = _createGlobalStateCom.setGlobalState;\n\n  return {\n    GlobalStateProvider: GlobalStateProvider,\n    useGlobalState: useGlobalState,\n    setGlobalState: setGlobalState\n  };\n};\nexport var createStore = function createStore(reducer, initialState, enhancer) {\n  if (!initialState) initialState = reducer(undefined, {\n    type: undefined\n  });\n  if (enhancer) return enhancer(createStore)(reducer, initialState);\n\n  var _createGlobalStateCom2 = createGlobalStateCommon(initialState),\n      GlobalStateProvider = _createGlobalStateCom2.GlobalStateProvider,\n      useGlobalState = _createGlobalStateCom2.useGlobalState,\n      getState = _createGlobalStateCom2.getState,\n      setState = _createGlobalStateCom2.setState;\n\n  var dispatch = function dispatch(action) {\n    var oldState = getState();\n    var newState = reducer(oldState, action);\n    setState(newState);\n    return action;\n  };\n\n  return {\n    GlobalStateProvider: GlobalStateProvider,\n    useGlobalState: useGlobalState,\n    getState: getState,\n    setState: setState,\n    // for devtools.js\n    dispatch: dispatch\n  };\n};","map":null,"metadata":{},"sourceType":"module"}