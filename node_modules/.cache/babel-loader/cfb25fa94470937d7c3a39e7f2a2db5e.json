{"ast":null,"code":"function _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = _superPropBase(target, property);\n\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = _getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { PropTypes } from 'prop-types';\nimport Draw from 'leaflet-draw'; // eslint-disable-line\n\nimport isEqual from 'lodash-es/isEqual';\nimport { MapControl, withLeaflet } from 'react-leaflet';\nimport leaflet, { Map, Control } from 'leaflet';\nvar eventHandlers = {\n  onEdited: 'draw:edited',\n  onDrawStart: 'draw:drawstart',\n  onDrawStop: 'draw:drawstop',\n  onDrawVertex: 'draw:drawvertex',\n  onEditStart: 'draw:editstart',\n  onEditMove: 'draw:editmove',\n  onEditResize: 'draw:editresize',\n  onEditVertex: 'draw:editvertex',\n  onEditStop: 'draw:editstop',\n  onDeleted: 'draw:deleted',\n  onDeleteStart: 'draw:deletestart',\n  onDeleteStop: 'draw:deletestop'\n};\n\nvar EditControl = /*#__PURE__*/function (_MapControl) {\n  _inherits(EditControl, _MapControl);\n\n  function EditControl() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, EditControl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(EditControl)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"onDrawCreate\", function (e) {\n      var onCreated = _this.props.onCreated;\n      var layerContainer = _this.props.leaflet.layerContainer;\n      layerContainer.addLayer(e.layer);\n      onCreated && onCreated(e);\n    });\n\n    return _this;\n  }\n\n  _createClass(EditControl, [{\n    key: \"createLeafletElement\",\n    value: function createLeafletElement(props) {\n      return createDrawElement(props);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      _get(_getPrototypeOf(EditControl.prototype), \"componentDidMount\", this).call(this);\n\n      var map = this.props.leaflet.map;\n      var onMounted = this.props.onMounted;\n\n      for (var key in eventHandlers) {\n        if (this.props[key]) {\n          map.on(eventHandlers[key], this.props[key]);\n        }\n      }\n\n      map.on(leaflet.Draw.Event.CREATED, this.onDrawCreate);\n      onMounted && onMounted(this.leafletElement);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      _get(_getPrototypeOf(EditControl.prototype), \"componentWillUnmount\", this).call(this);\n\n      var map = this.props.leaflet.map;\n      map.off(leaflet.Draw.Event.CREATED, this.onDrawCreate);\n\n      for (var key in eventHandlers) {\n        if (this.props[key]) {\n          map.off(eventHandlers[key], this.props[key]);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // super updates positions if thats all that changed so call this first\n      _get(_getPrototypeOf(EditControl.prototype), \"componentDidUpdate\", this).call(this, prevProps);\n\n      if (isEqual(this.props.draw, prevProps.draw) || this.props.position !== prevProps.position) {\n        return false;\n      }\n\n      var map = this.props.leaflet.map;\n      this.leafletElement.remove(map);\n      this.leafletElement = createDrawElement(this.props);\n      this.leafletElement.addTo(map);\n      return null;\n    }\n  }]);\n\n  return EditControl;\n}(MapControl);\n\n_defineProperty(EditControl, \"propTypes\", _objectSpread({}, Object.keys(eventHandlers).reduce(function (acc, val) {\n  acc[val] = PropTypes.func;\n  return acc;\n}, {}), {\n  onCreated: PropTypes.func,\n  onMounted: PropTypes.func,\n  draw: PropTypes.shape({\n    polyline: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    polygon: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    rectangle: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    circle: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    marker: PropTypes.oneOfType([PropTypes.object, PropTypes.bool])\n  }),\n  edit: PropTypes.shape({\n    edit: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    remove: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    poly: PropTypes.oneOfType([PropTypes.object, PropTypes.bool]),\n    allowIntersection: PropTypes.bool\n  }),\n  position: PropTypes.oneOf(['topright', 'topleft', 'bottomright', 'bottomleft']),\n  leaflet: PropTypes.shape({\n    map: PropTypes.instanceOf(Map),\n    layerContainer: PropTypes.shape({\n      addLayer: PropTypes.func.isRequired,\n      removeLayer: PropTypes.func.isRequired\n    })\n  })\n}));\n\nfunction createDrawElement(props) {\n  var layerContainer = props.leaflet.layerContainer;\n  var draw = props.draw,\n      edit = props.edit,\n      position = props.position;\n  var options = {\n    edit: _objectSpread({}, edit, {\n      featureGroup: layerContainer\n    })\n  };\n\n  if (draw) {\n    options.draw = _objectSpread({}, draw);\n  }\n\n  if (position) {\n    options.position = position;\n  }\n\n  return new Control.Draw(options);\n}\n\nexport default withLeaflet(EditControl);","map":null,"metadata":{},"sourceType":"module"}